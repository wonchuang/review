CSS 
1、了解CSS
	1、什么是CSS
		Cascading Style Sheets 层叠样式表 或 级联样式表 或 简称为 样式表
	2、问题
		1、网页中所有的文本都变为红色
		2、网页中所有div的文本都变为蓝色
			标记 ：font
			属性 ：color
		3、网页中所有div的文本都变为绿色

		HTML 缺点：
			1、不同标记中实现相同的效果，使用的是不同的属性
				<body text="">
				<font color="">
			2、没有有效的提升代码的可重用性
	3、CSS 与 HTML 
		1、HTML ：构建网页结构
		2、CSS ：构建网页样式

		W3C 建议尽量使用CSS样式来取代HTML属性
2、CSS语法(重点) 
	1、CSS样式表的使用方式(重点)
		1、内联方式
			又称为 "行内样式",将样式内容定义在HTML元素的style属性中
			语法：
				<ANY style="样式声明1;样式声明2;样式声明n">
				样式声明：
					1、由样式名称 和 样式属性值 共同组成
					2、样式名称(属性名) 和 样式值 用 : 连接
					3、多个样式声明之间用 ; 分隔
				常用样式属性 和 值:
					属性名           值
					color            合法的颜色值
					background-color 合法的颜色值
					font-size        px 或 pt 为单位的数值
			练习1：
				使用 内联方式 为一个 h1 标记设置以下样式
				 背景颜色 为 灰色(gray)
				 文本颜色 为 蓝色(blue)
				<h1 style="background-color:gray;color:blue;"></h1>
		2、内部样式表
			1、什么是内部样式表
				将 "样式规则" 声明在HTML文档<head>中的<style>中
				<head>
					<title></title>
					<style>
						样式规则1
						样式规则2
						... 
						样式规则n
					</style>
				</head>
			2、样式规则的语法
				样式规则由 选择器 和 若干样式声明 来组成
				1、选择器
					作用：规范了页面中哪些元素能够使用声明好的样式
					代表：
						元素选择器，由元素名称作为选择器，
						表示要匹配页面中指定的所有元素
				2、若干样式声明
					位于 选择器之后，使用 {} 括起来，
					里面可以包含若干的样式声明
				ex:
					控制页面中所有的h1元素，文本颜色为蓝色
					h1{
						color:blue;
					}
				练习2：
					使用内部样式表，控制页面中所有的 div 元素，
					背景颜色为 红色(red)，文本颜色为 黄色(yellow)
		3、外部样式表
			以独立样式表文件(*.css)的方式存在
			样式表文件中，只能包含 "样式规则"

			使用外部样式表步骤：
				1、创建样式表文件
				2、在要使用的网页上，引入样式表文件
					<head>
						<link rel="stylesheet" href="url">
					</head>
	2、CSS样式表的特征
		1、继承性
			具备父子关系，子元素 可以 继承父元素中的一部分效果
			<div style="color:red;">
				<span>文本是什么颜色?
				</span>
			</div>
		2、层叠性
			允许为一个元素定义多个样式规则
			样式不冲突时，可以合并成一个
			练习3：
				1、页面中创建一个div元素
				2、分别使用三个样式规则，为div增加样式
					1、颜色 ：红色
					2、背景颜色 ：黄色
					3、文字大小 ：24px
		3、优先级
			为元素定义多个规则时，如果样式声明冲突，则按照各自的优先级来应用样式
				优先级，由低到高
				1、浏览器缺省设置
				2、外部 或 内部样式表
					就近原则 ：以后定义者为准
				3、内联方式
		4、!important 规则
			!important 用于显示调整优先级
				选择器{
					属性:值 !important;
				}
		5、错误提示
			1、Unknown property name
				属性名 写错了!!!
			2、Invalid property value
				属性值 写错了!!!
	3、CSS基础选择器( 重难点 )
		1、通用选择器
			语法：*{}
			作用：匹配页面中所有元素
			ex:
				*{
					font-size:12px;
				}
		2、元素选择器
			别名：标签选择器，标签样式 ...
			作用：匹配页面中指定元素的所有标记
			ex:
				设置 body 中的文字大小为 12px
				body{
					font-size:12px;
				}
		3、类选择器(重点)
			作用：允许任意元素通过 class 属性来引用的选择器
			语法：
				1、定义 ：.类名 { ... }
					强调：
						1、. 在声明时不能省略
						2、类名：字母，数字，下划线(_),连字符(-),
						数字不能开头
				2、引用 
					<ANY class="类名">
			
			多类选择器的"引用"方式
				作用：让一个元素同时引用多个类选择器
				语法：class 属性值 是一个用 空格 隔开的选择器列表

			分类选择器的"定义"方式
				将类选择器 和 元素选择器结合起来使用，从而实现对某个元素的不同样式的细分控制
				语法：元素选择器.类选择器{}
				ex:
					div.redColor{ ... }
					匹配：class为redColor的div元素
				练习：
					设置 class 为 redColor 的 span元素，背景颜色为 yellow
		4、ID选择器
			作用：专属定制，只匹配页面上指定ID值的元素
			语法：#ID值{ ... }
			ex:
				#container{
					font-size:16px;
				}
			练习：
				设置 页面上 id为 banner 的元素，文本颜色 ：蓝色，背景颜色 ：黄色
				#banner{
					color:blue;
					background-color:yellow;
				}
		5、群组选择器
			特点：选择器的声明是一个以,隔开的选择器列表
			作用：将多个 样式效果相同的选择器，放在一起定义
			语法：选择器1,选择器2,...,选择器n{ ... }
			练习：
				将 id为container的元素，class为 redColor，class为 important 的 div元素，文本颜色 设置为 红色
		6、后代选择器
			后代：不限制层级的子/孙子元素们都是后代
			语法：选择器1 选择器2{ ... }
				1、匹配 id 为 container 中 所有的 div 元素
					#container div{ ... }
		7、子代选择器
			子代：只有一级层级关系的子元素是子代
			语法：选择器1>选择器2
				1、匹配 id 为container 中 下一级的div 元素
					#container>div{
						 ... ...
					}
		8、伪类选择器
			1、作用
				匹配 某元素 的不同状态的选择器
			2、分类
				1、链接伪类
				2、动态伪类
				3、目标伪类
				4、元素状态伪类
				5、结构伪类
				6、否定伪类
			3、语法
				:伪类
				选择器:伪类
				1、链接伪类
					1、:link , 匹配 未被访问的超链接的状态
					2、:visited ,匹配被访问过的超链接的状态
					练习：
						1、页面添加一个 a ，点击时跳转到 http://www.csdn.net
						2、样式
							未访问时，颜色设置为 黑色(black)
							访问过后，颜色设置为 粉色(pink)
				2、动态伪类
					1、:hover , 匹配鼠标悬停在元素上时的状态
					2、:active , 匹配元素被激活时的状态
					3、:focus , 匹配元素获取焦点时的状态

					练习：
						1、页面中创建一个 超链接，点击时链接到 http://www.oschina.net
						2、默认效果下(所有状态下)， a 标记显示为 颜色为 黑色，不显示下划线
							text-decoration:none;/*取消下划线*/
						3、鼠标悬停时，a 标记显示为 红色，显示下划线
							text-decoration:underline;
3、尺寸 与 边框
	1、单位
		#FF0000 -> #f00
		#aabbcc -> #abc
		color:#DD5044;
	2、尺寸属性
		1、作用
			用户设置元素的尺寸(宽度 和 高度)
			单位：通常为 % 或 px
		2、属性
			1、宽度
				width 
				max-width
				min-width
			2、高度
				height
				max-height
				min-height
			测试：
				1、在页面创建一个div，使用 开发者工具 观察 div的尺寸(宽度，高度)
				2、为 div 设置 宽度 500px，高度 300px,再使用 开发者工具观察div的尺寸
		3、页面中允许设置尺寸的元素
			1、所有块级元素都能设置尺寸属性
			2、所有的行内块元素能设置尺寸属性
				表单控件
			3、html元素本身就具备 width 和 height 属性的元素是可以设置的
				table，img
				
				除 img 以外的行内元素，不能设置 尺寸
				测试：
					为 i，b，s，u，span 设置 尺寸 能用吗？？
		4、溢出处理
			使用尺寸属性限制元素大小时，如果内容所需的控件大于 元素本身的话，会导致内容溢出
			溢出处理属性：
				1、属性 
					overflow : 横向 和 纵向都能处理
					overflow-x : 横向溢出处理
					overflow-y : 纵向溢出处理
				2、取值
					1、visible
						可见的，默认值
					2、hidden
						隐藏
					3、scroll
						滚动
					4、auto
						自动
						溢出时才显示滚动条

********************************************************************
1、边框属性
   1、边框
     1、简写属性
	      border:width style color;
	      width:宽度
	      style:样式
		solid,dotted,dashed
	      color:颜色
		transparent(透明)
	      注意：border:none;或border:0;
     2、单边定义：某个边的边框特征
        border-方向：width style color;
        方向：top/right/bottom/left
     3、单属性定义-设置四个边框的某一具体属性
        border-属性:值;
         属性：width/style/color
     4、单边单属性定义-某一边的某一具体属性
        border-方向-属性:值;
	 方向：top/right/bottom/left
	 属性：width/style/color
   2、边框倒角
    将元素的四个角，由直角倒换成圆角
    属性：border-radius
    取值：1个数值，最多4个，表示的是4个角的倒角圆的半径，可以为具体数值
    和 百分比
    单角定义：
   3、边框阴影
    属性：box-shadow
    取值：h-shadow  v-shadow blur spread color inset
       h-shadow:阴影的水平偏移距离（必须的）
                 取值为正，向右偏移
		 取值为负，向左偏移
       v-shadow:阴影的垂直偏移距离（必须的）
                 取值为正，向下偏移
		 取值为负，向上偏移
	blur:模糊距离
	spread:阴影尺寸
	color:阴影颜色
	inset:值，将默认的外阴影改为内阴影

	box-shadow:5px 5px 0px 5px #A0A0A0;

   4、轮廓
	  1、什么是轮廓
	     在元素外围的一条线，在边框外
	  2、属性
	     1、outline:width style color
		outline:none;  或者 outline:0; 
	     2、单独定义
		outline-style
		outline-color
		outline-width
	     练习：在页面创建文本框，将其轮廓取消
2、框模型
    距离产生美
       1、什么是框模型
         一切元素皆为框
	  框模型，又称“盒子模型”，定义了元素框处理元素内容（尺寸）
	  边框，内边距，外边界的一种方式。
	  当框模型介入到元素中，元素的实际尺寸会发送改变
	  元素实际宽度 =左右外边距+左右边距+左右内边距+width、
       2、外边距
          1、什么是外边距
	   围绕在元素周围的空白区域，位于框（边缘之外）
	  2、语法 
	   margin:value;四个方向外边距值
	   margin-top:value;上方外边距值
	    取值：
	    1、px的绝对值 
	    2、% 的相对值
	    3、距离为负
	    margin-top:10px;  元素向下移动10px
	    4、可以取值auto
	      1、正常情况只对左右外边距有效
	      2、对块级元素有效
	         为块级元素指定宽度后，在将左右外边距设为auto，该元素则水平居中
            简介写法：
	      1、margin:value;
	      2、margin:v1 v2;v1上下  v2左右
	      3、margin:v1 v2 v3;v1上  v2左右  v3下
	      4、margin:v1 v2 v3 v4;
          3、具备默认外边距的元素
	  body，h1~h6，p，dl，dd，ul，ol，pre
	  通过css Reset（css重置）将具备默认外边距的元素的外边距设置为0
		body，h1~h6，p，dl，dd，ul，ol，pre{
			   margin:0;
			   }
          4、特殊效果
	    1、外边距的合并
	      当两个垂直外边距相遇时，他们将合并成一个，
	      最终的距离值，以大值为准
	    2、上外边距的溢出
	       在为子元素设置上外边距时，有可能会作用在父元素上，
	       特殊条件：
	       1、父元素不能有上边框
	       2、为第一个子元素设置上外边距时
	       解决方案：
	       1、为父元素增加上边框
	          会影响父元素的高度
	       2、用父元素的上内边距来取代子元素的上外边距
	          会影响父元素的高度
               3、在子元素上增加一个空的<table></table>元素
	    3、为行内元素，行内块元素设置垂直外边距时的特殊效果
	       1、行内元素，对垂直外边距无效
	       2、行内块元素，设置垂直外边距时，整行的内容都跟着
	       改变
       3、内边距
          1、什么是内边距
	      内容区域和边框之间的空间
	  2、语法
	     属性：padding:value;
	     padding-top:value;
	     padding-right:value;
	     padding-bottom:value;
	     padding-left:value;
	     取值： px  %
       4、box-sizing属性
          作用：
	  指定元素边框内的尺寸计算方式
	  取值：1、content-box
	         默认值，边框内的尺寸=左右边框+左右内边距+width
		2、border-box
		  边框宽度 以及 内边距的距离，都会算在width内
3、背景属性
    1、背景色
       属性：background-color
       取值: 合法颜色
       注意：
         背景色是从边框位置处开始绘制的
    2、背景图片
        属性：background-image
	取值：url();
    3、背景平铺
        属性：background-repeat
	取值：
	    1、repeat：默认值
	    2、no-repeat
	    3、repeat-x
	    4、repeat-y
     4、背景图片尺寸
       属性：background-size
         取值：
	 1、width height(中间空格隔开)
	 2、width% height%(中间空格隔开)
         3、cover
	     将背景图放大，直到背景图覆盖到元素所有区域为止
	 4、contain
	     将背景图等比放大，直到 右边 或 下边 覆盖元素为止
         5、背景图片固定
	    属性：
	      background-attachment
	      取值：
	      1、scroll：滚动
	      2、fixed：固定
	 6、背景图片定位
	   改变背景图在元素中的位置
	   属性：background-position
	   取值：
	      1、x   y
	        x：背景图片水平偏移位置
		 x为正，右偏移
		 x为负，左偏移
	        y：背景图片垂直偏移位置
	         x为正，下偏移
		 x为负，上偏移
              2、x%   y%
	        0%   0%   左上角
	        100%   100%  右上角
	      3、关键字
	       x：left/center/right
	       y: top/center/bottom

	     css Sprites
	      将若干副不经常变换的图片封装到一幅大图中
	      配合背景图以及背景图片定位将想看的图片显示出来
	      1、页面中创建一个  与要显示区域大小一样的元素
	      2、将“雪碧图”作为元素的背景图


********************************************************************
1、边框
  1、边框
    border：width style color
    border-方向:width style color
    border-属性:值;
    border-方向-属性:值;
    border:none;  border:0;  border-方向:0/none;
  2、边框倒角
    border-radius:半径值
    取值:具体值/ %;
  3、边框阴影
    box-shadow:h-shadow v-shadow blur spread color inset;
  4、轮廓
    outline:none;
2、框模型
   1、外边距
      1、属性
        margin:value;
	margin-top/right/bottom/left:值;
	简洁写法:
	  margin:v1 v2;
	  margin:v1 v2 v3; 
	  margin:v1 v2 v3 v4;
      2、取值
          1、具体数值
	  2、%
	  3、auto
	     让块级元素水平居中(前提是必须设置宽度)
	  4、负数
	     移动
       3、特殊效果
          1、外边距合并
	  2、外边距溢出
	     1、父元素无上边框
	     2、为第一个子元素增加外边距
	      解决方案：
	        1、为父元素增加上边框
		2、使用父元素的上内边距取代子元素上外边距
		3、增加一个空<table>元素
	  3、行内元素和行内块元素垂直外边距
	     行内元素垂直外边距:无效
	     行内块元素垂直外边距:整行元素都跟着变
       4、默认外边距
           body,h1~h6,p,dl,dd,ol,ul,pre
   2、内边距
      1、属性
         padding:value;
	 padding-方向:value;
	 简洁写法：同margin 
      2、取值
         具体数值 和 %
      3、具备默认padding的元素
         ul,ol左内边距，默认40px
   3、box-sizing
      指定框模型的计算模式
      取值:
         1、content-box
	    默认值
	 2、border-box
	   元素的width 或height 取值中 会包含border以及padding
3、背景
   1、background-color
   2、background-image
      url();
   3、background-repeat
      no-repeat,repeat(默认值),repeat-x,repeat-y
   4、background-size
      1、width height
      2、width%  height%
      3、cover
      4、contain
   5、background-attachment
     1、scroll
     2、fixed(固定)
   6、background-position
     1、x y
     2、x% y%
     3、关键字
       x:left/center/right
       y:top/center/bottom
   7、背景简写属性
     background:color url() repeat attachment position;

********************************************************************
1、渐变
   1、什么是渐变
     多种颜色逐渐变化的效果
   2、渐变的要素
	1、填充方向
	 从上到下，从下到上，从右到左...
        2、色标
	 包含颜色及其出现的位置
	 每个色标表示的是一种颜色，渐变中，至少有两种色标
	3、渐变的分类
	  1、线性渐变
	     按直线的方向，填充渐变颜色
	  2、径向渐变
	     按圆形的方式填充出来的渐变效果
	  3、重复渐变
	    将线性渐变 或 径向渐变 重复的实现多次
        4、线性渐变
            属性：background-image
	    取值：
	    linear-gradient(angle,color-piont)
            1、angle
	       填充方向 或 角度
	       1、关键字
	         1、to top从下向上填充
		  对应：0deg
                 2、to right从左向右
		  对应：90deg
		 3、to bottom从上向下填充
		  对应：180deg
		 4、to left从右到左
		  对应：270deg
 	       2、角度
                 取值:0deg~360deg
             2、color-point
	          色标：颜色，出现的位置
		  1、red 0%
		     开始的时候，颜色为红色
		  2、green  50px
               练习:background-image:linear-gradient(to top,red 0%,yellow 100%);
        5、浏览器兼容性
	  由于 渐变 是css3新特性，老版的浏览器不支持，对于不支持的版本
	  ，可以添加浏览器前缀
	  Firefox:-moz-
	  chrome和safari: -webkit-
	  opera: -o-

	  #d1{
	  background-image:-moz-linear-gradient(...);
	  }
2、文本格式化
   1、字体属性
     1、指定字体
        font-family
        取值:value1,value2
     2、文字大小
        font-size
     3、字体加粗
	font-weight
        取值：1、normal
	      2、bold
	      3、value
	          400：normal
		  900：bold
     4、字体样式
	font-style
        取值:1、normal
	     2、italic
     5、小型大写字母
        font-variant
	     1、normal
	     2、small-caps
     6、字体的简写方式
	     属性font
	     取值style variant weight size family
	     注意一定要将family的写出来，否则无效

   2、文本属性
     1、文本颜色
        属性：color
	取值：合法颜色值
     2、文本排列方式（水平对齐方式）	
       属性:text-align
       取值:left/center/right/justify
     3、文字修饰（线条修饰）
       属性：text-decoration
       取值：1、none
             2、underline  下划线
	     3、line-through  删除线
	     4、overline  上划线
     4、行高
        作用：指一行数据所占的高度是多少
	场合：
	  1、设置行间距(模拟)
	  2、让一行文本在指定高度范围内垂直居中显示
	属性：line-height
	取值：以px为单位 或者 无单位数值
	#d1{
	  font-size:18px;
	  line-height:20px;//line-height:2;
	}
     5、首行文本缩进
        text-indent
     6、文本阴影
        属性：text-shadow
	取值：h-shadow v-shadow blur color
3、表格
   1、表格常用属性
        1、边距属性padding
	2、尺寸属性width height
	3、文本格式化属性text-，font-
	4、边框属性border
	   table{
	      border:1px solid #000;
	   }
	5、背景属性background
	6、垂直方向对齐属性
	     属性：vertical-align
	     取值：top/middle/bottom
   2、表格特有属性
        1、边框合并
		属性：border-collapse
		取值：1、separate
			   默认值，即分离边框模式
		      2、collapse
			   边框合并
	2、边框边距
		属性：border-spacing
		取值：1、取一个值
		        同时设置垂直 和水平 边距
	              2、去两个值
		        第一个水平，第二个垂直，用空格隔开
	     练习：1、创建一个2行2列的表格，要求有边框
	           2、设置边框边距左右10px上下20px
		   3、设置为边框合并的模式
	3、标题位置
		属性:caption-side
		取值:1、top
		     2、bottom
	4、显示规则
		作用：告诉浏览器如何布局一张表，指定表格，行，列的算法规则
                属性：table-layout
		取值：
		  1、auto 自动表格布局，列的尺寸有内容决定的
		  2、fixed固定表格布局，列的尺寸由设定的值来决定
            
	 自动表格布局vs固定表格布局
	  1、自动表格布局
              1、单元格大小会适应内容大小
	      2、在表格复杂的时候，加载速度较慢(缺点)
	      3、但表格比较灵活
	      4、适用于不确定每列大小时使用
	  2、固定表格布局
	    1、单元格的尺寸是由设定的值为准，与内容无关
	    2、会加速显示表格，效率比较高(优点)
	    3、表格不够灵活
4、浮动 
    1、定位
       改变元素在页面上的默认位置
    2、定位的分类
       1、普通流定位
       2、浮动定位
       3、相对定位
       4、绝对定位
       5、固定定位
    3、普通流定位(文档流定位)
       页面中默认定位方式
       特点:
       1、所有元素默认都是从其父元素左上角开始出现的
       2、页面中所有的块级元素按照从上到下排列，每个元素独占一行
       3、页面中所有行内元素，按照从左到右排列的，多个元素在一行显示
          显示不下则换行。
        流式定位:一行内显示不下所有元素就换行显示
	问题：在默认定位方式下，如何让多个块级元素显示--浮动定位解决
    4、浮动定位
       1、什么是浮动定位&浮动的特点
          1、浮动定位的元素会"脱离文档流"，那么元素将不再占据页面空间
	  （元素可以在页面中显示），后续未浮动元素要上前占位
	  2、浮动元素会停靠在其父元素的左边或右边 或者其他已浮动元素的
	  边缘上
	  3、浮动元素只能在当前行浮动。
       2、语法规范
           属性:float
	   取值:
	      1、none  默认值，没有任何浮动
	      2、left  左浮动，让元素停靠在父元素左边 或者左侧已有的元素边缘上
	      3、right 右浮动，让元素停靠在父元素右边 或者右侧已有的元素边缘上
       3、浮动引发的特殊效果
          1、如果一行显示不下所有的已浮动元素，那么最后一个将换行
	  但可能卡住。float.html/
          2、元素一旦浮动起来之后，那么宽度将变得以内容为准(不指定宽度情况下)
	  3、元素一旦浮动起来之后，那么将变成块级元素
	    行内元素：不能设置尺寸
            块级元素：允许设置尺寸
	    将行内元素浮动后，允许修改尺寸
	    创建一个span
	    设置200*200 观察效果
	    让span浮动，再观察效果
	  4、图片，文字，行内元素，行内块元素，采用的是"环绕"的方式来排列的
	  是不能被浮动元素压在底下的

********************************************************************
1、浮动
   1、清除浮动所带来的影响
      元素一旦浮动起来之后就会对后续的元素带来一定的位置影响，
      如果后续元素不想被影响的话，就可以通过  
      清除浮动所带来的影响 来解决位置问题(元素不上前占位)
      属性：clear 
      取值：
           1、none
	     默认值，不做任何清除操作
	   2、left
	     清除当前元素 前面的所有元素左浮动带来的影响
	   3、right
	     清除当前元素 前面的所有元素右浮动带来的影响
	   4、both
	     清除当前元素 前面的所有元素 任意浮动带来的影响

   2、浮动元素给父元素带来的影响
       由于浮动元素会脱离文档流，是不占据页面空间的，那么就会
       对父元素的高度带来一定影响
       1、创建一个div,id="container"，并设置边框1px solid #000
       2、在container，创建3个子元素（div,200*200）,逐个浮动，并观察
     解决父元素高度的影响的方案
      1、直接设置父元素高度
        弊端：必须要知道父元素高度
      2、设置父元素也浮动
        弊端：不是任何时候父元素都需要浮动，对后续元素带来位置的影响
      3、为父元素设置overflow
         取值：hidden或者auto
	 弊端：如果有需要溢出显示的东西，也一同被隐藏了。
      4、在父元素中追加一个空的块级子元素，并设置style="clear:both;"
      5、还有.
2、显示方式
   决定了元素是"行内元素"还是"块级元素"还是"行内块元素"...
   属性:display
   取值:1、none
          不显示元素
	  元素脱离文档流
        2、block
	  按 块级的方式 显示元素
	  显示，独占一行，允许修改尺寸 以及外边距
	3、inline
	   按 行内元素方式 显示元素
	   显示，多个元素在一行，不允许修改尺寸 以及 垂直外边距
	4、inline-block
	 按 行内块元素 的方式显示元素
	 多个元素在一行内显示，允许修改尺寸
        5、table
	  按 表格 的方式显示元素
	  显示，独占一行，允许修改尺寸
3、显示效果
   1、visibility 属性
    作用:指定元素的可见性
    取值:1、visible,默认值,元素可见
         2、hidden,隐藏
	 3、collapse,用在表格元素，删除一行或一列时不影响表格
	 整体布局
	面试：
         visibility:hidden与display:none;
	  display会脱离文档流，所以不占空间
	  visibility不会脱离文档流，所以占空间
   2、opacity  属性
	      作用：透明度
	      取值：0.0(完全透明) ~ 1.0(默认值)
   3、vertical-align属性
         1、应用在表格中
	   控制表格中的数据的垂直对齐方式
	   取值：top/middle/bottom
	 2、应用在 图片 和行内块 元素上
	   控制图片或行内块元素两边的文本，相对
	   他们的垂直的文本对齐方式
	   取值：
	   1、top
	   2、middle
	   3、bottom
	   4、baseline-基线对齐
	     1、行内块
	        是在最后一行的文本的底部
	     2、图片
	        图片底部向下3px位置处
	   在项目中，
	      img{
	       vertical-align:bottom;
	      }
   4、cursor属性
        鼠标悬停在元素上，鼠标的显示效果
	1、default
	2、pointer 小手
	3、crosshair +
	4、text  I
	5、wait  等待
	6、help  帮助
4、列表属性
      1、列表项的标志
	      属性:list-style-type
	      取值:1、none  不显示标志
      2、列表项图像
	      属性：list-style-image
	      取值：url(图像路径);
      3、列表项的位置
           list-style-position
	   1、outside
	    默认值，将标志放置与li外边，列表的padding内
	   2、inside
	    将标志放置与li里边，属于li内容区域的一部分
      4、列表属性
		属性：list-style
		取值：type url() position
		常用：list-style:none;
5、定位属性
   1、定位属性
    属性：position
    取值：static/relative/absolute/fixed
    注意：如果将元素的定位方式指定为relative/absolute/fixed 
    任何一种的话，那么该元素则被称为"已定位元素"
   2、偏移属性
     作用：伪类修改"已定位元素"的位置
     属性：
     1、top
     2、right
     3、bottom
     4、left
   3、堆叠顺序
     作用:修改"已定位元素"们之间的堆叠效果
     属性:z-index
     取值:无单位的数字
2、定位方式-相对定位(relative)
    1、什么是相对定位
      元素会相对于它自己原来的位置，偏移某个距离
      相对定位的元素，偏移完成之后，原来的位置还会被
      保留，不会被其他元素占据
    2、语法
      属性：position
      取值：relative
      配合着 偏移属性 实现位置改变
    3、使用场合
3、定位方式-绝对定位(absolute)
    1、什么是绝对定位&绝对定位特点
      1、绝对定位元素会脱离文档流-不占距页面空间
      2、绝对定位的元素会相对于离它最近的，已定位的祖先元素来实现
         位置的初始化
      3、如果元素没有已定位的祖先元素的话，那么它的位置就会相对于body
         初始化
    2、语法
       属性：position
       取值：absolute
       配合偏移属性实现位置的改变
    3、小窍门
       一般情况，绝对定位的元素一定会有一个已定位的祖先元素
       多数都是由直接父元素来充当这个角色
    4、绝对定位对元素的影响
	1、脱离文档流，允许压在其他元素的上方
	2、绝对定位的元素会变成块级元素
	3、margin可以正常使用，但margin的左右auto会失效
	4、绝对定位的元素，将left、right、bottom、top四个值都设置为
	0的情况下,margin:auto;会绝对居中。

   
********************************************************************
1、定位
   1、堆叠顺序
      属性：z-index
      取值：无单位的数值，值越大，越靠上
       注意：
         1、只能调整“已定位元素”的堆叠效果
	 2、如果z-index相同，那么后来居上
	 3、父子关系无法调整堆叠顺序，永远都是子压父上
   2、固定定位
     1、什么是固定定位
        将元素的内容固定在页面的某个位置处，会一致显示在用户的可视化区域内
     2、语法：
	       position:fixed;
	       配合  偏移属性 实现位置的摆放 
     3、注意
        1、固定定位的元素永远都是相对于 body 做位置的初始化
	2、固定定位的元素会脱离文档流，不占页面空间
        3、固定定位的元素会变成块级元素
2、复杂选择器--css3高级
   1、兄弟选择器
      兄弟:通过 同级 元素来匹配指定元素
      1、相邻兄弟选择器
         作用:匹配某元素后  紧紧挨着它的 指定元素
	<div id="d1"></div>
	<div id="d2"></div>
	<div id="d3"></div>
	语法: 选择器1+选择器2{...}
	      ex: #d1+div{
	          /*匹配出来的是d2*/
	         } 
      2、通用兄弟选择器
         作用：匹配 某元素后 所有的指定的兄弟元素
	   d1兄弟:d2d3   d2兄弟:d3
	 语法：选择器1~选择器2
	   <div id="d1"></div>
	   <div id="d2"></div>
	   <div id="d3"></div>
          ex:
		#d1~div{
		  /*匹配d2d3*/
		}
   2、属性选择器
      1、允许使用元素所附带的属性及其值 来匹配页面元素
      <a id="" class="" title="" target="_blank"></a> 
      语法：
         核心：[]
	 1、[attr]
	     attr:表示 任意的属性名称
	     匹配 附带 attr属性的元素
	     ex:
	     [id]:匹配有id属性的元素
	     [title]:匹配有title属性的元素
	 2、elem[attr]
	     elem:表示页面中的元素
	     ex:
	       1、匹配页面中，附带class属性的p元素
	         p[class]
	       2、匹配页面中，附带class属性 和id属性的div元素
                div[class][id]
         3、[attr=value]
	     value可以表示任意属性值
	     1、div[id=container]<==>#container
	     2、匹配页面中所有的文本框，边框设置为border:1px solid #000
	        input[type=text]{...}
	 4、[class~=value] 
	    <p class="c1 c2 c3 c4"></p>
	    匹配 class 的属性值，是一个值列表，并且value是该列中的一个独立选择器的元素
	      ex：
	        1、匹配class列表中包含c3选择器的p元素
		p[class~=c3] <==>p.c3
	 5、[attr^=value]
	   匹配attr 属性值  是以value字符作为开始的元素
	         <div class="col-md-1"><div>
	         <div class="col-md-2"><div>
	         <div class="col-sm-1"><div>
	         <div class="col-xs-1"><div>
	         <div class="col-lg-1"><div>
		 ex： 1、匹配所有class属性值，是以col作为开始的元素
			[class ^= col]

          6、[attr $=value]
	    匹配attr 属性值  是以value字符作为结尾的元素
                 ex： 1、匹配所有class属性值，是以-1作为结尾的元素
			[class $= "-1"]
	  7、[attr *=value ]
	    匹配attr 属性值  是包含value字符的元素

	   ex： 1、匹配所有class属性值，是包含md的元素
			[class *= "md"]
   3、伪类选择器
     1、目标伪类
       作用：突出显示活动的html锚点，用于匹配当前活动的目标元素
       语法： :target
     2、结构伪类
        1、:first-child
	  匹配属于其父元素的首个子元素
        2、:last-child
	  匹配属于其父元素的最后一个子元素
	3、:nth-child(n)
	  匹配属于其父元素中的第n个子元素
	   :nth-child(2)
	   div:nth-child(1)<==>div:first-child
	4、:empty
	  匹配没有子元素的元素(没有子元素，没有文本，没有回车或者空格)
	5、:only-child
	  匹配属于其父元素中的唯一一个子元素
      3、否定伪类
          作用：将指定选择器匹配上 的元素排除出去
	  语法：:not(selector)
	  ex: 
	   tr:not(:first-child){
	     font-style:italic;
	   }
   4、伪元素选择器
       1、:first-letter 或 ::first-letter
          匹配指定元素的首字符
       2、:first-line  或::first-line
          匹配指定元素的首行
       3、::selection
          匹配被用户选取的内容部分
3、内容生成
    1、什么是内容生成
       通过css的方式，向指定元素的内容区域中，增加一部分内容
    2、伪元素选择器
        1、:before或者 ::before
	  作用：匹配到某元素的内容区域 之前
	  <p>(:before)这是一个p</p>
	2、:after 或者 ::after
	  作用：匹配到某元素的内容区域 之后
	  <p>这是一个p(:after)</p>
    3、属性：
	content
	作用：向指定的区域(:before/:after)插入生成的文本或图片
	取值：
	   1、字符串：要生成的纯文本
	   2、图片：url();
    4、解决的问题
       1、浮动元素父元素的高度问题
                  <div id="d1">
			<div id="c1"></div>
			<div id="c2"></div>
			<div id="c3"></div>
			//省略<div style="clear:both;"></div>
		  </div>
                特点：
		  1、在父元素的内容区域之后
		  2、增加一个“空元素”
		  3、必须是“块级元素”
		  4、必须设置"clear:both;"
			#d1:after{
			   content:"";
			   display:block;
			   clear:both;
			 }
       2、外边距溢出问题
		<div id="d1">
		        //省略<table></table>
			<div id="d2"></div>
		</div>
                解决方法：
		#d1:before{
			content:"";
			display:table;
		    }	
4、弹性布局(难点)
   1、什么是弹性布局
      设置某元素内的子元素们的布局方式
        
      弹性布局的容器：简称"容器"，一般指父元素
      弹性布局的项目：简称"项目"，想实现布局效果的元素
      主轴：元素排列方向的一根轴，默认是横轴(x轴)
      交叉轴: 与主轴对应的一条轴，主轴为横轴，则交叉轴为纵轴。否之则反。
     
     使用弹性布局：
        为容器元素增加属性display，设置完成后，子元素会自动变成弹性布局的项目。
	属性:display
	取值:
	    1、flex
	    将块级元素 变成 弹性布局的容器
	    2、inline-flex
	    将 行内元素 变成 弹性布局容器
	    注意：
	    1、容器中的项目们自动会变为块级元素，允许修改尺寸
	    2、项目们的float，clear，vartical-align属性失效
	    3、容器的text-align属性失效
   2、容器的属性
     1、flex-direction
	作用：决定主轴，以及在主轴的排列方向
	取值：
        1、row
	   默认值，主轴为横轴，起点在左端，项目从左到右排列
	2、row-reverse
	   主轴为横轴，起点在右端，项目从右到左排列
	3、column
	   主轴为纵轴，起点在顶端，项目从上到下排列
	4、column-reverse
	   主轴为纵轴，起点在底端，项目从下到上排列
     2、flex-wrap
        作用：在一根轴上排列不下所有项目时，如何换行
	取值：
	1、nowrap
	    默认值，不换行，项目会缩小
	2、wrap
	    换行
	3、wrap-reverse
	    换行，第一行在最下方
     3、flex-flow
          作用：是flex-direction 和 flex-wrap的简写属性
	  取值：
	       1、row nowrap
	       2、direction wrap
     4、justify-content
        作用：指定项目在  主轴上的对齐方式
	取值：
	   1、flex-start
	      在轴的起点对齐
	   2、flex-end
	      在轴的终点对齐
	   3、center
	      居中对齐
	   4、space-between
	      两端对齐，项目之间的间隔都是相等的
           5、space-around
	      每个项目两边的空白间距是相等的

     5、align-items
        作用：定义了项目在交叉轴上的对齐方式
	取值：
	   1、flex-start
	      在交叉轴的起点对齐
	   2、flex-end
	      在交叉轴的终点对齐
	   3、center
	      在交叉轴的居中对齐
	   4、baseline
	      基线对齐
           5、stretch
	      默认值，拉伸，如果项目未设置高度时，那么项目将占满整个项目的高度
    6、align-content
        作用：当项目有多根主轴的时候，指定项目们在上的对齐方式，以及项目们的边距
	   1、flex-start
	   在交叉轴的起点对齐
	   2、flex-end
	   在交叉轴的终点对齐
	   3、center
	   在交叉轴的居中对齐
	   4、space-between
	   在交叉轴的两端对齐
	   5、space-around
	   每根轴线的两边的空白间距是相等的

*********************************************************
1、弹性布局(续)
  1、项目属性(6个)
     1、order
        作用:定义项目的排列顺序，值越小，越靠前，默认值为0
	取值：整数数字
     
     2、flex-grow
        作用：定义项目的放大比例，主轴有剩余空间时有效，默认为0，即不放大
	取值：整数数字
	flex-grow:1 (1为剩余空间的份数)
    
     3、flex-shrink
        作用：定义项目的缩小比例，默认为1.当主轴空间不足时，项目们如何缩小。
	取值：整数,取值为0，不缩小
	flex-shrink:0
     4、flex-basis	      
        作用：定义项目在主轴上的空间大小。
	取值：
	   1、auto 默认值，项目本身大小
	   2、length 自定义大小，等同于width或height

     5、flex
        作用：grow，shrink，basis简写
	取值：
	  1、auto:即 1 1 auto
	  2、none:   0 0 auto
	  3、grow shrink basis;//   1 0 auto; 0 1 auto;
     6、align-self
        作用：定义当前项目与其他项目不一样的交叉轴对齐方式
	取值：
	  1、 flex-start
	      在交叉轴的起点对齐
	   2、flex-end
	      在交叉轴的终点对齐
	   3、center
	      在交叉轴的居中对齐
	   4、baseline
	      基线对齐
           5、stretch
	      默认值，拉伸，如果项目未设置高度时，那么项目将占满整个项目的高度
	   6、auto
	      采用容器的align-items的值
2、CSSHack
    解决浏览器的兼容性的问题
     1、CSS Hack的原理
     根据不同的浏览器，编写不同的CSS代码
     靠CSS的优先级，来解决浏览器兼容性 
     2、CSSHack的实现方式
        1、CSS类内部Hack
		在css样式属性名称前或属性值后，添加浏览器能够识别的标识
		IE6 -
		IE7 +
		IE8 \0
		IE9  IE10 \9\0
	2、选择器Hack
		IE6 *
		IE7 *+
	3、HTML头部引用Hack
	   使用HTML的条件注释，来判断浏览器的类型
	   语法：
	      <!--[if条件 IE版本]>
			执行内容
	      <![endif]-->
	      版本：
	       指的是IE的版本号 6-10
	       如果省略版本号，则判断是否为IE浏览器
	      条件：
	        1、gt  判断当前浏览器是否大于指定版本
			<!--[if gt IE 6]>
				执行内容
			<![endif]-->
		2、gte 判断当前浏览器是否大于等于指定版本
		3、lt  判断当前浏览器是否小于指定版本
		4、lte 判断当前浏览器是否小于等于指定版本
		5、!   判断当前浏览器是否不等于指定版本
3、转换
    1、什么是转换
       改变元素在页面上的大小，位置，形状 以及 角度的一种方式
       可以向元素应用2D 以及 3D的转换效果
    2、转换属性
        1、转换效果
	   属性：transform
	   取值：
	      1、none：默认值，即没有任何转换效果
	      2、一个或多个转换函数，如果是多个转换函数，中间用空格隔开
	2、转换原点
	   属性:transfrom-origin
	   取值:
	      1、两个值：表示原点在x轴和y轴的位置
	      2、三个值：表示原点在x轴y轴和z轴的位置
	      数值，百分比，关键字，多个值中间用空格隔开

	3、2D的转换效果
	   1、位移
	        改变元素在页面上的位置
		属性：transform
		取值：
		translate(x) 横向移动
		  x正 向右，x为负 向左
		translate(x,y) 
		  y正 向上，y为负 向下
           2、缩放
	        属性：transform
		取值：
		1、scale(value)
		2、scale(x,y)
		3、scaleX(x)
		4、scaleY(y)
		x、y的取值
		    默认值为1
		    放大：大于1的数值
		    缩小：0-1的数值
		  
	   3、旋转
                 改变元素在页面上的角度
		 属性transform
		 取值：rotate(ndeg)
		 n为正，顺时针旋转
		 n为负，逆时针旋转
		 注意：1、转换原点会影响旋转效果
		       2、旋转操作时，连同坐标轴一同都跟着转
           4、倾斜
	         改变元素在页面中的形状
		 属性:transform
		 取值：
		  1、skewX(ndeg)
		     沿x的倾斜角度
	             让元素向横向倾斜，向左向右倒
		     n取值为正，y轴逆时针倾斜(左倾斜)
		     n取值为负，y轴顺时针倾斜(右倾斜)
		  2、skewY(ndeg)
	             让元素向纵向倾斜，向左向右倒
		     n取值为正，x轴逆时针倾斜(上倾斜)
		     n取值为负，x轴顺时针倾斜(下倾斜)
		  3、skew(x)等于skewX()
		  4、skew(x,y)
        4、3D转换
	    1、属性
	       属性：perspective
	       值：数值px
	       作用：模拟人眼到3D转换物体的距离，取值越大，表示离物体越远，
	       取值越小，表示离物体越近
	    2、3D旋转
	        属性：transform
		取值：
		  rotateX(xdeg):以x轴为中心，旋转元素
		  rotateY(ydeg):以y轴为中心，旋转元素
		  rotateZ(zdeg):以z轴为中心，旋转元素
4、过渡
    1、什么是过渡
      使得CSS的属性值在一段时间内平缓变化的效果
      过渡能观察到元素的属性值的变化过程
    2、过渡四要素(四属性)
      1、指定过渡属性
        作用：指定那个CSS值属性值变化时 需要使用过渡的效果
	当指定的属性值发生变化时，过渡就会被触发
	语法：
	   属性：transition-property
	   取值：
		1、属性名称 
	        允许设置过渡的属性：
			1、颜色属性
			2、取值为数字的属性（opacity）
			3、转化属性-transform
			4、渐变属性
			5、visibility
			6、阴影属性
		2、none:默认值
		3、all
      2、指定过渡时间
         过渡的效果要在多长时间内完成
	   属性：transition-duration
	   取值：以s或ms为单位的数值
	     1s=1000ms
	   默认值为0，意味着没有过渡效果
      3、指定过渡的速度时间曲线函数
           属性：transition-timing-function
	   取值：
	    1、ease
	      默认值，慢速开始，快速边快，慢速结束
	    2、linear
	      匀速
	    3、ease-in
	       慢速开始，加速结束
	    4、ease-out
	       快速开始，减速结束
	    5、ease-in-out
	       慢速开始和结束，中间先加后减
      4、过渡延迟      
           当用户激发操作后等待多长时间后再显示效果
           属性：transition-delay
	   取值：以s或ms 为单位的数值
      5、简写
	   transition:property duration timing-function delay;
5、动画
  1、什么是动画
    动画指的是使元素从一种样式变化为另一种样式甚至更多样式的过程
    (动画是复杂版的过渡效果)
    本质：使用"关键帧"，来定义动画的每一步
          关键帧：包含运行的时间点以及动作(样式)
  2、动画的使用步骤
    1、声明动画
       指定动画名称 以及涉及到的关键帧们
    2、为元素调用动画
       指定元素使用哪个动画效果
  3、声明动画     
     样式表中，通过 @keyframes规则来声明动画
     @keyframes 动画名称{
        0%{
	  /*动画开始时，元素样式*/
	  属性:值;
	  属性:值;
	}
	50%{
	  /*动画一半时，元素样式*/
	  属性:值;
	  属性:值;
	}
	100%{
	  /*动画结束时，元素样式*/
	  属性:值;
	  属性:值;
	}
     }

     动画声明的浏览器兼容性：
     Firefox:-moz-
     Chrome& safari -webkit-
     Opera:-o-

     @-moz-keyframes 动画名{}
     @-webkit-keyframes 动画名{}
     @-o-keyframes 动画名{}
  4、调用动画
	  1、animation-name
	  作用:要调用的动画名称
	  2、animation-duration
	  作用：动画完成一个周期需要的时长
	  取值：s或ms
	  3、animation-timing-function
		  作用：指定动画的速度时间曲线函数
		  取值：
		    1、ease
		      默认值，慢速开始，快速边快，慢速结束
		    2、linear
		      匀速
		    3、ease-in
		       慢速开始，加速结束
		    4、ease-out
		       快速开始，减速结束
		    5、ease-in-out
		       慢速开始和结束，中间先加后减
	  4、animation-delay
		作用：指定动画播放延迟
		取值：s 或ms
          5、animation-iteration-count
	        作用：指定动画的播放次数
		取值：
		   1、默认值为1
		   2、自定义数值
		   3、infinite，无限次播放
          6、animation-diretion
	        作用：指定动画的播放方向
		取值:
		    1、normal:正向播放
		    2、reverse：逆向播放
		    3、alternate 轮流播 奇数次 正向播  偶数次 逆向播
          7、简写：
	    animation:name duration timing-function delay iteration-count   direction;

	  8、animation-fill-mode
	     作用：动画的填充模式，指在动画在播放之前 或 播放之后的显示效果
	     取值：
	         1、none  默认值，无效果
		 2、forwards：当动画播放完成后，元素将保持在最后一个帧的状态上
		 3、backwards：在延迟时间内，动画将保持在第一帧的状态上
		 4、both：动画播放前后，分别应用在第一帧和最后一帧状态上
          9、animation-play-state
	    作用： 暂停或播放状态
	    取值：1、paused：动画暂停
	          2、running：动画播放



















         










          















